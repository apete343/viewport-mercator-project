{"componentChunkName":"component---node-modules-ocular-gatsby-src-templates-search-jsx","path":"/search","webpackCompilationHash":"a447037f9971db20ce71","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":[{"excerpt":"What's New v6.0 Release date: TBD NEW:  can now match the z-buffer of the latest Mapbox (when called with ) NEW:  utility FIX: returned…","rawMarkdownBody":"# What's New\n\n## v6.0\n\nRelease date: TBD\n\n* NEW: `getProjectionMatrix` can now match the z-buffer of the latest Mapbox (when called with `nearZMultipler: 1 / viewport.height, farZMultiplier: 1.01`)\n* NEW: `addMetersToLngLat` utility\n* FIX: returned values by `getDistanceScales` now reflect the flipped y-direction between spherical coordinates and the WebMercator world.\n* FIX: `WebMercatorViewport`'s `project` and `unproject` handle altitude correctly\n* BREAKING: `getWorldPosition` is removed\n\n## v5.2\n\nRelease date: June 25, 2018\n\n* Upgrade to `math.gl@2.0.0`\n\n\n## v5.1\n\nRelease date: April 16, 2018\n\n* **`getProjectionParameters`** - New utility function that returns basic projection parameters, like field of view etc. Enables applications to directly create projection matrices using the math library of their choice, instead of using `getProjectionMatrix`. This can for instance be used to create orthographic projections, and to switch between perspective and orthographic projection modes.\n**`assert` Dependency Removed** - No longer imports the \"built-in\" `assert` module (which added size and caused issues in react-native).\n**Size Reduction** - Adds more compact, untranspiled distribution for apps that only need to run on modern browsers. To reduce your final bundle size, add the `esnext` tag to the front of webpack's `resolve.mainField` array and it will pick up the untranspiled distribution.\n\n\n## v5.0\n\nRelease Date: Jan 9, 2018\n\n- **Improved Distance Scales** - Second order polynomial approximations are now available, with significant precision improvement over the previous linear approximations.\n- **3D Projection** - `project` and `unproject` methods deal with 3d pixel coordinates (depth).\n- **Improved documentation** - This website now matches other frameworks in the [vis.gl](http://vis.gl) framework suite.\n- **Primitive Web Mercator Utilities** - A more primitive set of utility functions is now available. Classes here and in other repos like deck.gl use these for increased code sharing and smaller exectables.\n- **Size Reduction** - Use [math.gl](https://uber-web.github.io/math.gl/#/documentation/overview) library, which is a smaller dependency than `gl-matrix`.\n\n\n## v4.1\n\nRelease Date: Jun 26, 2017\n\n- **fitBounds**: The `PerspectiveMercatorViewport.fitBounds` method is back.\n- **Size Reduction** - Replace gl-matrix dependency with cherry-pick imports\n\n\n## v4.0\n\nRelease Date: Apr 5, 2017\n\n* **Perspective Support** - Adds a new perspective enabled `PerspectiveMercatorViewport` class\n* **New method** - `getLocationAtPoint`\n* **New method** - `getLngLatFromPos`\n\n\n## v3 - Beta Releases\n\nRelease Date: N/A\n\nv3 was a series of beta only releases while the new API was hammered out. There is no official v3 release.\n\n\n## v2 - Property renaming\n\nRelease Date: Dec 2, 2015\n\n* `center` property was broken up into `longitude`, `latitude` properties.\n* `dimensions` property was broken up into `width`, and `height` properties.\n\n```js\nvar viewport = ViewportMercator({\n  longitude: 0,\n  latitude: 0,\n  zoom: 0,\n  width: 600,\n  height: 800\n});\n```\n\nHere's what creating a viewport used to look like, prior to `2.0`.\n\n```js\nvar viewport = ViewportMercator({\n  center: [0, 0],\n  zoom: 0,\n  dimensions: [600, 800]\n});\n```\n\nThe change was made to support the typical `viewport` object from the new [react-map-gl](github.com/uber/react-map-gl) [API changes](https://gist.github.com/vicapow/00017553e92f613d5361).\n\n## v1\n\nInitial release\n\nRelease Date: Oct 26, 2015\n\n","slug":"docs/whats-new","title":"What's New"},{"excerpt":"Coordinates Coordinates Description LngLat  on earth World  on the Web Mercator plane Pixels  on screen LngLat Coordinates LngLat…","rawMarkdownBody":"# Coordinates\n\n| Coordinates | Description |\n|---------|-------------|\n| LngLat | `[lng, lat, alt]` on earth |\n| World  | `[x, y, z]` on the Web Mercator plane |\n| Pixels | `[x, y, depth]` on screen |\n\n### LngLat Coordinates\n\nLngLat coordinates are specified in\n`[longitude, latitude, elevation]` where longitude and latitude are in degrees from Greenwich meridian and the equator respectively, and altitude is in meters above sea level.\n\nNotes:\n* Order is `[lng, lat]` (it can help to think of them as `[x, y]` to remember the order).\n* lng goes from -180 to 180.\n* lat goes from -85.051129 to 85.051129.\n\nThe reason for the latitude cutoff is that the cylindrical mercator projection projects the earth sphere onto an infinitely tall strip, with the poles being projected at infinity. The reason that the cutoff is at ~85 degrees is that cutting off at this value makes the remaining projected area into a square (which at zoom 0 is projected onto 512x512 \"pixels\"). For details see e.g. https://en.wikipedia.org/wiki/Web_Mercator.\n\n\n### World Coordinates\n\nWorld coordinates specifies a location on the linear Web Mercator plane. Each unit is a \"pixel\" on the Web Mercator tile. It is unique for each lngLat location at a specific zoom level. `[x, y, z]` corresponds to `[longitude, latitude, elevation]` in the LngLat system.\n\n### Pixel Coordinates\n\nPixel coordinates specifies a point on screen in the format of `[x, y, z]` where x and y are in pixels on screen and `z` is pixel depth, normally between `-1` and `1`.\n\nBy default, the pixel coordinate system of the viewport is defined with the origin in the top left, where the positive x-axis goes right, and the positive y-axis goes down. That is, the top left corner is `[0, 0]` and the bottom right corner is `[width - 1, height - 1]`. The `project`/`unproject` functions have a flag that can reverse this convention.\n\n### Additional Notes\n\n* Per cartographic tradition, all angles including `latitude`, `longitude`,\n  `pitch` and `bearing` are specified in degrees, not radians.\n\n* It is possible to query the PerspectiveMercatorViewport for a meters per pixel scale.\n  Note that that distance scales are latitude dependent under\n  web mercator projection [see](http://wiki.openstreetmap.org/wiki/Zoom_levels),\n  so scaling will depend on the viewport center and any linear scale factor\n  should only be expected to be locally correct.\n","slug":"docs/articles/coordinates","title":"Coordinates"},{"excerpt":"Web Mercator Utility Functions  Project a coordinate on sphere onto the Web Mercator coordinate system at a given zoom level. Parameters…","rawMarkdownBody":"# Web Mercator Utility Functions\n\n### `lngLatToWorld(lngLat, scale)`\n\nProject a coordinate on sphere onto the Web Mercator coordinate system at a given zoom level.\n\nParameters:\n- `lngLat` (Array, required) - Specifies a point on the sphere to project. `[lng,lat]` in degrees.\n- `scale` (Number, required) - Scale of the projection.\n\nReturns:\n- `[x, y]`\n\n\n### `worldToLngLat(xy, scale)`\n\nUnproject a coordinate from the Web Mercator coordinate system back to the sphere at a given zoom level.\n\nParameters:\n- `xy` (Array, required) - Specifies a point on the Web Mercator tile to unproject. `[x, y]` in pixels.\n- `scale` (Number, required) - Scale of the projection.\n\nReturns:\n- `[lng, lat]`\n\n\n### `worldToPixels(xyz, projectionMatrix)`\n\nProject a coordinate from the Web Mercator coordinate system to screen.\n\nParameters:\n- `xyz` (Array, required) - Specifies a point in the Web Mercator tile. `z` is the elevation and optional.\n- `projectionMatrix` (Matrix4, required) - The projection matrix.\n\nReturns:\n- `[x, y, z]` - coordinates on screen, `z` is the pixel depth.\n\n\n### `pixelsToWorld(xyz, unprojectionMatrix, targetZ)`\n\nProject a coordinate from screen to the Web Mercator coordinate system.\n\nParameters:\n- `xyz` (Array, required) - Specifies a point on screen. `z` is the pixel depth and optional.\n- `unprojectionMatrix` (Matrix4, required) - The unprojection matrix.\n- `targetZ` (Number, optional) - If pixel depth is not specified, `targetZ` is used as the elevation plane to unproject onto. Default `0`.\n\nReturns:\n- `[x, y, z]` - coordinates on the Web Mercator tile, `z` is the elevation.\n\n\n### `getMeterZoom(viewport)`\n\nReturns the zoom level that gives a 1 meter pixel at a certain latitude.\n\nParameters:\n- `viewport` (Object) - viewport props\n- `viewport.latitude` (Number, required)\n\n\n### `getDistanceScales(viewport)`\n\nCalculate linear scales for quick conversion between meters/degrees/pixels distances around the given lat/lon.\n\nIn mercator projection mode, the distance scales vary significantly with latitude. The scale is only reasonably accurate locally.\n\nParameters:\n- `viewport` (Object) - viewport props\n- `viewport.longitude` (Number, required)\n- `viewport.latitude` (Number, required)\n- `viewport.zoom` (Number, optional)\n- `viewport.scale` (Number, optional) - must supply if zoom is not specified\n- `viewport.highPrecision` (bool, optional) - default `false`\n\nReturns:\n- `distanceScales` (Object)\n- `distanceScales.pixelsPerMeter` (Array) - pixels per meter in `[x, y, z]`.\n- `distanceScales.metersPerPixel` (Array) - meters per pixel in `[x, y, z]`\n- `distanceScales.pixelsPerDegree` (Array) - pixels per degree in `[x, y, z]`\n- `distanceScales.degreesPerPixel` (Array) - degree per pixel in `[x, y, z]`\n- `distanceScales.pixelsPerMeter2` (Array) - if `highPrecision` is `true`, returns pixels per meter adjustment in `[x2, y2, z2]`. It offers a cheap way to compensate for the precision loss with latitude. Amends `pixelsPerMeter` by y offset (in meters): `[x + x2 * dy, y + y2 * dy, z + z2 * dy]`.\n- `distanceScales.pixelsPerDegree2` (Array) - if `highPrecision` is `true`, returns pixels per degree adjustment in `[x2, y2, z2]`. It offers a cheap way to compensate for the precision loss with latitude. Amends `pixelsPerDegree` by y offset (in degrees): `[x + x2 * dy, y + y2 * dy, z + z2 * dy]`.\n\n\n### `addMetersToLngLat(lngLatZ, xyz)`\n\nOffset a spherical position by meters.\n\nParameters:\n- `lngLatZ` (Array) - origin in `[lng, lat, alt]`. Altitude is optional.\n- `xyz` (Array) - offset from the origin `[x, y, z]` in meters. `x` is easting and `y` is northing. `z` is optional.\n\nReturns:\n- `[lng, lat]` if the third component in neither argument is specified, or\n- `[lng, lat, alt]` otherwise.\n\n\n### `getViewMatrix(viewport)`\n\nGet a transform matrix that projects from the mercator (pixel) space into the camera (view) space. Centers the map at the given coordinates.\n\nParameters:\n- `viewport` (Object) - viewport props\n- `viewport.height` (Number, required)\n- `viewport.pitch` (Number, required)\n- `viewport.bearing` (Number, required)\n- `viewport.altitude` (Number, required)\n- `viewport.flipY` (Boolean, optional) - Whether the returned matrix should flip y. Default `true` (latitude and screen y increase in opposite directions).\n- `viewport.center` (Array, optional) - pre-calculated world position of map center using `getWorldPosition`. Default `[0, 0]`.\n\nReturns:\n- `viewMatrix` (Array) 4x4 matrix.\n\n\n### `getProjectionMatrix(viewport)`\n\nGet a transform matrix that projects from camera (view) space to clipspace.\n\nParameters:\n- `viewport` (Object) - viewport props\n- `viewport.width` (Number, required)\n- `viewport.height` (Number, required)\n- `viewport.pitch` (Number, required)\n- `viewport.altitude` (Number, required)\n- `viewport.nearZMultiplier` (Number, optional) - near plane multiplier. Default `1`.\n- `viewport.farZMultiplier` (Number, optional) - far plane multiplier. Default `1`\n\nNotes:\n\nTo match Mapbox's z-buffer, use these parameters:\n- Before 0.29:\n  + `nearZMultiplier`: `0.1`\n  + `farZMultiplier`: `1`\n- Starting 0.29:\n  + `nearZMultiplier`: `1 / viewport.height`\n  + `farZMultiplier`: `1.01`\n\n\n### `getProjectionParameters({width, height, altitude, pitch, farZMultiplier}})`\n\nParameters:\n- `width` (Number, required)\n- `height` (Number, required)\n- `pitch` (Number, required)\n- `altitude` (Number, required)\n- `farZMultiplier` (Number, optional) - near plane multiplier. Default `1`.\n- `farZMultiplier` (Number, optional) - far plane multiplier. Default `1`.\n\nReturns\n* Object with `{fovy, aspect, focalDistance, near, far}` fields.\n\n\n### `fitBounds(opts)`\n\nReturns map settings (longitude, latitude and zoom) that will contain the provided corners within the provided dimensions. Only supports non-perspective mode.\n\nParameters:\n- `opts` (Object) - options\n- `opts.width` (Number, required)\n- `opts.height` (Number, required)\n- `opts.bounds` (Array, required) - opposite corners specified as `[[lon, lat], [lon, lat]]`\n- `opts.padding` (Number, optional) - the amount of padding in pixels to add to the given bounds. Default `0`.\n- `opts.offset` (Array, optional) - the center of the given bounds relative to the map's center, `[x, y]` measured in pixels.\n\nReturns:\n- `{longitude, latitude, zoom}`\n\n### `normalizeViewportProps(viewport)`\n\nThis will adjust the map center and zoom so that the projected map fits into the target viewport size without white gaps.\n\nParameters:\n- `viewport` (Object)\n- `viewport.width` (Number, required)\n- `viewport.height` (Number, required)\n- `viewport.longitude` (Number, required)\n- `viewport.latitude` (Number, required)\n- `viewport.zoom` (Number, required)\n- `viewport.pitch` (Number, optional)\n\nReturns:\n- `viewport` - normalized `{width, height, longitude, latitude, zoom, pitch, bearing}`\n\n### `flyToViewport(startProps, endProps, t)`\n\nWhile flying from one viewport to another, returns in-transition viewport props at a given time. This util function implements the algorithm described in “Smooth and efficient zooming and panning.” by Jarke J. van Wijk and Wim A.A. Nuij.\n\nParameters:\n- `startProps` (Object) - viewport to fly from\n- `startProps.width` (Number, required)\n- `startProps.height` (Number, required)\n- `startProps.longitude` (Number, required)\n- `startProps.latitude` (Number, required)\n- `startProps.zoom` (Number, required)\n- `endProps` (Object) - viewport to fly from\n- `endProps.longitude` (Number, required)\n- `endProps.latitude` (Number, required)\n- `endProps.zoom` (Number, required)\n- `t` (Number) - a time factor between 0 and 1. `0` indicates the start of the transition, `1` indicates the end of the transition.\n\nReturns:\n- `{longitude, latitude, zoom}`\n\n","slug":"docs/api-reference/web-mercator-utils","title":"Web Mercator Utility Functions"},{"excerpt":"Accuracy of Offset Projection  offers a cheap way to project lng/lat or meter offset to pixels. It is useful when using the GPU to project a…","rawMarkdownBody":"# Accuracy of Offset Projection\n\n`getDistanceScales` offers a cheap way to project lng/lat or meter offset to pixels. It is useful when using the GPU to project a cluster of coordinates near an origin point, without suffering the precision loss of WebGL.\n\nThis article discusses the usage and accuracy of the distance scales.\n\n# Meter offset to pixels\n\nRegular meter offset to pixels projection:\n```\nuniform vec3 pixelsPerMeter;\nvec3 meters_offset_to_pixels_offset(vec3 meters) {\n    return meters * pixelsPerMeter;\n}\n```\n\nWhen `getDistanceScales` is called with flag `highPrecision: true`, it generates additional multipliers to compensate for precision loss over latitude change. More precise meter offset to pixels projection:\n```\nuniform vec3 pixelsPerMeter;\nuniform vec3 pixelsPerMeter2;\nvec3 meters_offset_to_pixels_offset_adjusted(vec3 meters) {\n    return meters * (pixelsPerMeter + pixelsPerMeter2 * meters.y);\n}\n```\n\nAccuracy at San Francisco (37N, z = 12):\n\n| R   | X unadjusted | X adjusted |\n| --- | ---- | ---- |\n| 100 meters | off by -0.000 pixels, 0.001% | off by 0.000 pixels, 0.001% |\n| 1000 meters | off by -0.008 pixels, 0.012% | off by 0.000 pixels, 0.001% |\n| 5000 meters | off by -0.200 pixels, 0.060% | off by 0.002 pixels, 0.001% |\n| 10000 meters | off by -0.804 pixels, 0.121% | off by 0.003 pixels, 0.000% |\n| 30000 meters | off by -7.277 pixels, 0.366% | off by -0.021 pixels, 0.001% |\n\n\nAccuracy at high latitude (75N, z = 12):\n\n| R   | X unadjusted | X adjusted |\n| --- | ---- | ---- |\n| 100 meters | off by -0.001 pixels, 0.006% | off by 0.000 pixels, 0.001% |\n| 1000 meters | off by -0.130 pixels, 0.061% | off by 0.001 pixels, 0.001% |\n| 5000 meters | off by -3.290 pixels, 0.309% | off by -0.001 pixels, 0.000% |\n| 10000 meters | off by -13.200 pixels, 0.620% | off by -0.044 pixels, 0.002% |\n| 30000 meters | off by -119.884 pixels, 1.877% | off by -1.473 pixels, 0.023% |\n\n\n# LngLat offset to pixels\n\nRegular lng_lat offset to pixels projection:\n```\nuniform vec3 pixelsPerDegree;\nvec3 lnglat_offset_to_pixels_offset(vec3 lngLatZ) {\n    return lngLatZ * pixelsPerDegree;\n}\n```\n\nWhen `getDistanceScales` is called with flag `highPrecision: true`, it generates additional multipliers to compensate for precision loss over latitude change. More precise meter offset to pixels projection:\n```\nuniform vec3 pixelsPerDegree;\nuniform vec3 pixelsPerDegree2;\nvec3 lnglat_offset_to_pixels_offset_adjusted(vec3 lngLatZ) {\n    return lngLatZ * (pixelsPerDegree + pixelsPerDegree2 * lngLatZ.y);\n}\n```\n\n\nAccuracy at San Francisco (37N, z = 12):\n\n| R   | Y unadjusted | Y adjusted |\n| --- | ---- | ---- |\n| 0.001 degrees | off by -0.000 pixels, 0.001% | off by -0.000 pixels, 0.000% |\n| 0.01 degrees | off by -0.005 pixels, 0.007% | off by -0.000 pixels, 0.000% |\n| 0.05 degrees | off by -0.125 pixels, 0.034% | off by -0.000 pixels, 0.000% |\n| 0.1 degrees | off by -0.499 pixels, 0.068% | off by -0.001 pixels, 0.000% |\n| 0.3 degrees | off by -4.508 pixels, 0.204% | off by -0.022 pixels, 0.001% |\n\nAccuracy at high latitude (75N, z = 12):\n\n| R   | Y unadjusted | Y adjusted |\n| --- | ---- | ---- |\n| 0.001 degrees | off by -0.001 pixels, 0.003% | off by -0.000 pixels, 0.000% |\n| 0.01 degrees | off by -0.081 pixels, 0.034% | off by -0.000 pixels, 0.000% |\n| 0.05 degrees | off by -2.038 pixels, 0.172% | off by -0.005 pixels, 0.000% |\n| 0.1 degrees | off by -8.172 pixels, 0.345% | off by -0.039 pixels, 0.002% |\n| 0.3 degrees | off by -74.258 pixels, 1.046% | off by -1.055 pixels, 0.015% |\n\n\n\n","slug":"docs/articles/offset-accuracy","title":"Accuracy of Offset Projection"},{"excerpt":"viewport-mercator-project Projection and camera utilities supporting the Web Mercator Projection. At its core this is a utility for…","rawMarkdownBody":"# viewport-mercator-project\n\nProjection and camera utilities supporting the Web Mercator Projection. At its core this is a utility for converting to and from map coordinates (i.e. latitude, longitude) to screen coordinates and back.\n\n\n## Who is this for?\n\nSpecifically built for use with [deck.gl](https://github.com/uber/deck.gl) and [react-map-gl](https://github.com/uber/react-map-gl), but could be useful for any web mapping application that wants to support perspective enabled Web Mercator Projections with floating point zoom levels.\n\n\n## Example Usage\n\nThe `WebMercatorViewport` class offers the equivalent of a 3D matrix \"camera\" class of the type you would find in any 3D/WebGL/OpenGL library.\n\n```js\nimport WebMercatorViewport from 'viewport-mercator-project';\n\n// A viewport looking at San Francisco city area\nconst viewport = new WebMercatorViewport({\n  width: 800,\n  height: 600,\n  longitude: -122.45,\n  latitude: 37.78,\n  zoom: 12,\n  pitch: 60,\n  bearing: 30\n});\n\nviewport.project([-122.45, 37.78]);\n// returns pixel coordinates [400, 300]\nviewport.unproject([400, 300]);\n// returns map coordinates [-122.45, 37.78]\n```\n\n\n","slug":"docs","title":"viewport-mercator-project"},{"excerpt":"WebMercatorViewport The main purpose of the  is to enable 3D rendering to\nseamlessly overlay on top of map components that take web mercator…","rawMarkdownBody":"# WebMercatorViewport\n\nThe main purpose of the `PerspectiveMercatorViewport` is to enable 3D rendering to\nseamlessly overlay on top of map components that take web mercator style\nmap coordinates (`lat`, `lon`, `zoom`, `pitch`, `bearing` etc),\nand to facilite the necessary mercator projections by breaking them into a\nminimal non-linear piece followed by a standard projection chain.\n\n\n## Methods\n\n### Constructor\n\n| Parameter     |  Type    | Default | Description                                                |\n| ------------- | -------- | ------- | ---------------------------------------------------------- |\n| `width`       | `Number` | `1`       | Width of \"viewport\" or window                              |\n| `height`      | `Number` | `1`       | Height of \"viewport\" or window                             |\n| `latitude`    | `Number` | `37`      | Center of viewport on map (alternative to center)          |\n| `longitude`   | `Number` | `-122`    | Center of viewport on map (alternative to center)          |\n| `zoom`        | `Number` | `11`      | Scale = Math.pow(2,zoom) on map (alternative to opt.scale) |\n| `pitch`       | `Number` | `0`       | Camera angle in degrees (0 is straight down)               |\n| `bearing`     | `Number` | `0`       | Map rotation in degrees (0 means north is up)              |\n| `altitude`    | `Number` | `1.5`     | Altitude of camera in screen units                         |\n\n\nRemarks:\n - Altitude has a default value that matches assumptions in mapbox-gl\n - `width` and `height` are forced to 1 if supplied as 0, to avoid\n   division by zero. This is intended to reduce the burden of apps to\n   to check values before instantiating a `Viewport`.\n -  When using mercatorProjection, per cartographic tradition, longitudes and\n   latitudes are specified as degrees.\n\n\n### `project(lngLatZ, opts)`\n\nProjects latitude and longitude to pixel coordinates on screen.\n\n| Parameter      | Type      | Default  | Description                     |\n| -------------- | --------- | -------- | ------------------------------- |\n| `lngLatZ`      | `Array`   | (required) | map coordinates, `[lng, lat]` or `[lng, lat, Z]` where `Z` is elevation in meters |\n| `opts`         | `Object`  | `{}`     | named options                   |\n| `opts.topLeft` | `Boolean` | `true`   | If `true` projected coords are top left, otherwise bottom left |\n\nReturns: `[x, y]` or `[x, y, z]` in pixels coordinates. `z` is pixel depth.\n- If input is `[lng, lat]`: returns `[x, y]`.\n- If input is `[lng, lat, Z]`: returns `[x, y, z]`.\n\nRemarks:\n* By default, returns top-left coordinates suitable for canvas/SVG type\n  rendering.\n\n\n### `unproject(xyz, opts)`\n\nUnproject pixel coordinates on screen to longitude and latitude on map.\n\n| Parameter      | Type      | Default  | Description                     |\n| -------------- | --------- | -------- | ------------------------------- |\n| `xyz`          | `Array`   | (required) | pixel coordinates, `[x, y]` or `[x, y, z]` where `z` is pixel depth   |\n| `opts`         | `Object`  | `{}`     | named options                   |\n| `opts.topLeft` | `Boolean` | `true`   | If `true` projected coords are top left, otherwise bottom left |\n| `opts.targetZ` | `Number`  | `0`      | If pixel depth `z` is not specified in `xyz`, use `opts.targetZ` as the desired elevation |\n\nReturns: `[lng, lat]` or `[longitude, lat, Z]` in map coordinates. `Z` is elevation in meters.\n- If input is `[x, y]` without specifying `opts.targetZ`: returns `[lng, lat]`.\n- If input is `[x, y]` with `opts.targetZ`: returns `[lng, lat, targetZ]`.\n- If input is `[x, y, z]`: returns `[lng, lat, Z]`.\n\n\n#### `projectFlat(lngLat, scale)`\n\nProject longitude and latitude onto Web Mercator coordinates.\n\n| Parameter      | Type      | Default  | Description                     |\n| -------------- | --------- | -------- | ------------------------------- |\n| `lngLat`          | `Array`   | (required) | map coordinates, `[lng, lat]`   |\n| `scale`         | `Number`  | `this.scale`     | Web Mercator scale  |\n\nReturns:\n\n - `[x, y]`, representing Web Mercator coordinates.\n\n#### `unprojectFlat(xy, scale)`\n\nUnprojects a Web Mercator coordinate to longitude and latitude.\n| Parameter      | Type      | Default  | Description                     |\n| -------------- | --------- | -------- | ------------------------------- |\n| `xy`          | `Array`   | (required) | Web Mercator coordinates, `[x, y]`   |\n| `scale`         | `Number`  | `this.scale`     | Web Mercator scale  |\n\nReturns:\n\n - `[longitude, latitude]`\n\n\n#### `fitBounds(bounds, options)`\n\nGet a new flat viewport that fits around the given bounding box.\n\n* `bounds` ([[Number,Number],[Number,Number]]) - an array of two opposite corners of\nthe bounding box. Each corner is specified in `[lon, lat]`.\n* `options` (Object)\n  + `options.padding` (Number|{top:Number, bottom: Number, left: Number, right: Number}, optional) - The amount of\n  padding in pixels to add to the given bounds from the edge of the viewport. If padding is set as object, all parameters are\n  required.\n  + `options.offset` ([Number,Number], optional) - The center of the given bounds relative to the viewport's center, `[x, y]` measured in pixels.\n\n\n#### `getMapCenterByLngLatPosition(opts)`\n\nReturns the map center that place a given [lng, lat] coordinate at screen point [x, y].\n\nParameters:\n- `opts` (Object) - options\n- `opts.lngLat` (Array, required) - [lng,lat] coordinates of a location on the sphere.\n- `opts.pos` (Array, required) - [x,y] coordinates of a pixel on screen.\n\nReturns:\n- `[longitude, latitude]` new map center\n\n","slug":"docs/api-reference/web-mercator-viewport","title":"WebMercatorViewport"},{"excerpt":"Installation Using The  class offers the equivalent of a 3D matrix \"camera\" class of the type you would find in any 3D/WebGL/OpenGL library.","rawMarkdownBody":"# Installation\n\n```\nnpm install viewport-mercator-project --save\n```\n\n## Using\n\nThe `WebMercatorViewport` class offers the equivalent of a 3D matrix \"camera\" class of the type you would find in any 3D/WebGL/OpenGL library.\n\n```js\nimport WebMercatorViewport from 'viewport-mercator-project';\n\n// A viewport looking at San Francisco city area\nconst viewport = WebMercatorViewport({\n  width: 800,\n  height: 600,\n  longitude: -122.45,\n  latitude: 37.78,\n  zoom: 12,\n  pitch: 60,\n  bearing: 30\n});\n\nviewport.project([-122.45, 37.78]);\n// returns pixel coordinates [400, 300]\nviewport.unproject([400, 300]);\n// returns map coordinates [-122.45, 37.78]\n```\n","slug":"docs/get-started","title":"Installation"}]}}}